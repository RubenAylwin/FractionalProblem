#ifndef SCALAR_FUNCTION_TEST
#define SCALAR_FUNCTION_TEST
/*
 *TESTS FOR SCALAR FUNCTIONS
 */
#include <ScalarValuedFunction.h>
#include <vector>
#include <MyTypes.h>
#include <cmath>
#include <Curve.h>
namespace FunctionTests{

    static double tolerance = 1E-9;

    /*
     *TEST FOR EXPLICIT FUNCTION
     */
    BOOST_AUTO_TEST_SUITE(Scalar)

    BOOST_AUTO_TEST_SUITE(ExplicitScalarTest)

    BOOST_AUTO_TEST_CASE(ConstructorTest)
    {
        msg(1) << "start Scalar::ExplicitScalar::ConstructorTest" << endMsg;
        ExplicitScalarFunction_1D function([](double t) {return std::complex<double>(2*t, 0);});
        msg(1) << "end Scalar::ExplicitScalar::ConstructorTest" << endMsg;
    }

    BOOST_AUTO_TEST_CASE(EvaulationTest)
    {
        msg(1) << "start Scalar::ExplicitScalar::EvaluationTest" << endMsg;
        ExplicitScalarFunction_1D function([](double t) {return 2*t;});
        BOOST_CHECK_CLOSE(function(1).real(), 2, tolerance);
        BOOST_CHECK_CLOSE(function(3.14).real(), 6.28, tolerance);
        BOOST_CHECK_CLOSE(function(-3.14).real(), -6.28, tolerance);
        msg(1) << "end Scalar::ExplicitScalar::EvaluationTest" << endMsg;
    }

    BOOST_AUTO_TEST_SUITE_END()

    BOOST_AUTO_TEST_SUITE(BoundaryScalarTraceTest)


    BOOST_AUTO_TEST_CASE(ConstructorTest)
    {
        msg(1) << "start Scalar::BoundaryScalarTraceTest::ConstructorTest" << endMsg;
        TrigonometricCurve curve(1, 0, {0}, {0});
        BoundaryScalarTrace_1D function([](double t) {return std::complex<double>(2*t, 0);}, curve);
        msg(1) << "end Scalar::BoundaryScalarTraceTest::ConstructorTest" << endMsg;
    }

    BOOST_AUTO_TEST_CASE(EvaulationTest)
    {
        msg(1) << "start Scalar::BoundaryScalarTraceTest::EvaluationTest" << endMsg;
        TrigonometricCurve curve(1, 0, {0}, {0});
        BoundaryScalarTrace_1D function([](double t)->BEM::Complex {return 2*t;}, curve);
        BOOST_CHECK_CLOSE(function(1).real(), 2, tolerance);
        BOOST_CHECK_CLOSE(function(3.14).real(), 6.28, tolerance);
        BOOST_CHECK_CLOSE(function(-3.14).real(), -6.28, tolerance);
        msg(1) << "end Scalar::BoundaryScalarTraceTest::EvaluationTest" << endMsg;
    }
    
    BOOST_AUTO_TEST_SUITE_END()

    BOOST_AUTO_TEST_SUITE(BoundaryScalarRestrictionTest)


    BOOST_AUTO_TEST_CASE(ConstructorTest)
    {
        msg(1) << "start Scalar::BoundaryScalarRestrictionTest::ConstructorTest" << endMsg;
        TrigonometricCurve curve(1, 0, {0}, {0});
        BoundaryScalarRestriction_1D function([](double t, double s) ->BEM::Complex {return std::complex<double>(2*t, s);}, curve);
        msg(1) << "end Scalar::BoundaryScalarRestrictionTest::ConstructorTest" << endMsg;
    }

    BOOST_AUTO_TEST_CASE(EvaulationTest)
    {
        msg(1) << "start Scalar::BoundaryScalarRestrictionTest::EvaluationTest" << endMsg;
        TrigonometricCurve curve(3, 0, {1}, {0});
        BoundaryScalarRestriction_1D function([](const double t, const double s) {return std::complex<double>(2*t, s);}, curve);

        BOOST_CHECK_CLOSE(function(1).real(), 6, tolerance);
        BOOST_CHECK_CLOSE(function(1).imag(), std::sin(2.0*M_PI), tolerance);

        BOOST_CHECK_CLOSE(function(M_PI - 3).real(), 6*M_PI - 18, tolerance);
        BOOST_CHECK_CLOSE(function(M_PI - 3).imag(), std::sin(2.0*M_PI*M_PI), tolerance);
        msg(1) << "end Scalar::BoundaryScalarRestrictionTest::EvaluationTest" << endMsg;
    }


    BOOST_AUTO_TEST_SUITE_END()
    
    BOOST_AUTO_TEST_SUITE_END()

}
#endif
